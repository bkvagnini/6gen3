{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Passing test results in classes \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
module Fatcat\
  # Set the Century in the year field to either 19 or 20 - only for pbt\
  class DateOfBirthRule\
    def self.run(preid_barcode, gridded_dob, dob)\
      calc_dob = ''\
      century = ''\
\
      if preid_barcode.strip == ""\
        if gridded_dob =~ /\\d\{2\}$/\
          if gridded_dob =~ /[6-9]\\d$/\
            century = "19"\
          elsif gridded_dob =~ /[0\\d]/\
            century = "20"\
          end\
        else\
          century = "  "\
        end\
\
        calc_dob = gridded_dob[0..3]\
        calc_dob << century << gridded_dob[4..5]\
      else\
        # dob is from preId Label and we have no way to calculate\
        calc_dob = dob\
      end\
\
      #puts calc_dob\
\
      result_data = \{ :name => :date_of_birth_rule,\
                      :calc_dob => calc_dob,\
                      :dob => dob,\
                      :preid_barcode => preid_barcode,\
                      :gridded_dob => gridded_dob,\} if calc_dob != dob\
\
    end\
  end\
end\
\
#result = Fatcat::DateOfBirthRule.run('123456789', '042501', '04251890')\
#puts result\
\
\'97\'97\'97\'97\'97\'97\'97\'97\
test_date_of_birth_rule.rb\
\
require 'test/unit'\
require 'shoulda'\
require_relative '../lib/fatcat/date_of_birth_rule'\
\
class TestDateOfBirthRule < Test::Unit::TestCase\
  context 'running the rule' do\
    should 'return nil when the rule succeeds' do\
      assert_equal Fatcat::DateOfBirthRule.run('   ', '042501', '04252001'), nil\
    end\
    should 'return a properly populated results hash when the rule fails' do\
      result = Fatcat::DateOfBirthRule.run('   ', '042501', '04251890')\
      assert_kind_of Hash, result\
      assert_equal 5, result.size\
      assert_equal :date_of_birth_rule, result[:name]\
      assert_equal '04252001', result[:calc_dob]\
      assert_equal '04251890', result[:dob]\
      assert_equal '   ', result[:preid_barcode]\
      assert_equal '042501', result[:gridded_dob]\
    end\
   \
    should 'return nil when there is a preid barcode' do\
      assert_equal Fatcat::DateOfBirthRule.run('123456789', '042591', '04251890'), nil\
    end\
     \
    should 'return 20 when YY is <10' do\
      result = Fatcat::DateOfBirthRule.run('   ', '042501', '04251890')\
      assert_equal '04252001', result[:calc_dob]\
    end\
    \
    should 'return 19 when YY is >60' do\
      result = Fatcat::DateOfBirthRule.run('   ', '042591', '04251890')\
      assert_equal '04251991', result[:calc_dob]\
    end\
    \
    should 'fail when YY is 20 and no preId barcode' do\
      refute_match Fatcat::DateOfBirthRule.run('         ', '042520', '04252020'), nil\
    end\
    \
    should 'fail when YY is 59 and there is a preId barcode' do\
      refute_match Fatcat::DateOfBirthRule.run('123456789', '042559', '04251959'), nil\
    end\
  \
  end\
end\
}